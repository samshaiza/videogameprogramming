using System;
using System.Collections;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System.Collections.Generic;

namespace Star_Field
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Texture2D tex;
        //Star[] stars = new Star[100];
        //ArrayList stars = new ArrayList<Star>();
        List<Star> stars = new List<Star>();
        Rectangle screenRect;
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            int screenWidth = graphics.GraphicsDevice.Viewport.Width;
            int screenHeight = graphics.GraphicsDevice.Viewport.Height;
            screenRect = new Rectangle(0, 0, screenWidth, screenHeight);
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            tex = this.Content.Load<Texture2D>("star white");
            
            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
                this.Exit();
            for (int i = 0; i < stars.Count; i++)
            {
                stars[i].Update(gameTime);
            }
            if (stars.Count < 100)
            {
                //stars[i].setTex(tex);
                stars.Add(new Star(tex));

            }
            for (int i = 0; i < stars.Count; i++)
            {
                if (!new Rectangle((int)stars[i].pos.X, (int)stars[i].pos.Y, 20, 20).Intersects(screenRect))
                {
                    stars.Remove(stars[i]);
                    stars.Add(new Star(tex));
                }
            }
            //if(ar.Count < 100)
            //{
            //    ar.Add();
            //}
            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here
            spriteBatch.Begin();
            for (int i = 0; i < stars.Count; i++)
            {
                spriteBatch.Draw(stars[i].tex, new Rectangle((int) stars[i].pos.X, (int) stars[i].pos.Y, 20, 20), stars[i].colour);
            }

            //spriteBatch.Draw(stars[0].tex, new Rectangle((int)stars[0].pos.X, (int)stars[0].pos.Y, 20, 20), stars[0].colour);
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}
